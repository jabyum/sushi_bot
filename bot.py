from telebot import TeleBot
from interactions.locator import geolocators
from interactions.converting import convert_to_excel
import os
from database import productservice as pr
from database import userservice as us
from telebot.types import ReplyKeyboardRemove
import buttons as bt
from database import Base, engine
import time
import threading
bot = TeleBot("TOKEN")
Base.metadata.create_all(bind=engine)
carts = {}
admins_group = -4111231307
# us.register_admin(305896408, "Programmer")
# us.register_admin(305896408, "Programmer")
# pr.register_category("üç±–°–µ—Ç—ã", "üç±Setlar")
# pr.register_category("üç£–°—É—à–∏", "üç£Sushi")
# pr.register_category("üç§–†–æ–ª–ª—ã", "üç§Rollar")
# pr.register_category("ü•¨–°–∞–ª–∞—Ç—ã", "ü•¨–°–∞–ª–∞—Ç–ª–∞—Ä")
# pr.register_category("ü•°–í–û–ö", "ü•°WOK")
# pr.register_category("üçú–°—É–ø—ã", "üçú–®–æ—Ä–±–∞–ª–∞—Ä")
# pr.register_category("ü•ü–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏", "ü•ü –ò—Å–∏—Ç–∏“õ –∏—Å—Ç–∏—Ñ–æ–¥–∞")
# pr.register_category("üçû–•–ª–µ–±", "üçû–ù–æ–Ω")
# pr.register_category("üç∞–î–µ—Å–µ—Ä—Ç—ã", "üç∞–î–µ—Å–µ—Ä—Ç–ª–∞—Ä")
# pr.register_category("üçπ–ù–∞–ø–∏—Ç–∫–∏", "üçπ–ò—á–∏–º–ª–∏–∫–ª–∞—Ä")
# pr.register_category("üçπ–ù–∞–ø–∏—Ç–∫–∏", "üçπ–ò—á–∏–º–ª–∏–∫–ª–∞—Ä")
# pr.register_category("‚ùáÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "‚ùáÔ∏è“ö—û—à–∏–º—á–∞")
# pr.register_category("‚≠êÔ∏è–ê–∫—Ü–∏–∏", "‚≠êÔ∏è–ê–∫—Ü–∏—è–ª–∞—Ä")
@bot.message_handler(commands=["start", "admin"])
def start(message):
    user_id = message.from_user.id
    check_admin = us.check_admin(user_id)
    # check_admin = True
    checker = us.check_user_db(user_id=user_id)
    if message.text == "/start":
        if checker == True:
            language = us.check_language_db(user_id)
            if language == "ru":

                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())
            elif language == "uz":

                bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())
        elif checker == False:
                bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ \n\n"
                                          "–•—É—à –∫–µ–ª–∏–±—Å–∏–∑! –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.choose_language_kb())

    elif message.text == "/admin":
        if check_admin == True:
            bot.send_message(user_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", reply_markup=bt.admin_panel_kb())
        else:
            pass
def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", reply_markup=bt.phone_kb_ru())
    bot.register_next_step_handler(message, get_phone, name)
def get_phone(message, name):
    user_id = message.from_user.id
    if message.contact:
        phone_number = message.contact.phone_number
        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())
        us.register_user(user_id=user_id, user_name=name, phone_number=phone_number, language="ru")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())



def get_name_uz(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, "–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç—É–≥–º–∞—á–∞ –æ—Ä“õ–∞–ª–∏ —é–±–æ—Ä–∏–Ω–≥", reply_markup=bt.phone_kb_uz())
    bot.register_next_step_handler(message, get_phone_uz, name)


def get_phone_uz(message, name):
    user_id = message.from_user.id
    if message.contact:
        phone_number = message.contact.phone_number
        bot.send_message(user_id, "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑!", reply_markup=ReplyKeyboardRemove())
        us.register_user(user_id=user_id, user_name=name, phone_number=phone_number, language="uz")
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())



@bot.callback_query_handler(lambda call: call.data in ["back", "user_cart", "plus", "minus",
                                                       "none", "to_cart", "clear_cart", "main_menu",
                                                       "order", "close", 'cats_excel', "prods_excel",
                                                       "admins_excel", "get_base", "users_excel",
                                                       "yes", "no", "ru_lang", "admin_product", "admins",
                                                       "add_admin", "delete_admin", "add_product",
                                                       "delete_product", "change_product", "change_name",
                                                       "change_desc", "change_cat", "change_photo",
                                                       "change_price", "change_ru_name", "change_uz_name",
                                                       "change_ru_desc", "change_uz_desc", "send_prove",
                                                       'accept_order', "cancel_order", "send_message", 'mailing',
                                                       "to_mm", "cash"])
def for_call(call):
    user_id = call.message.chat.id
    if call.data == "back":
        bot.delete_message(user_id, call.message.message_id)
        cats = pr.get_cats()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.categories_ru(cats))
    elif call.data == "mailing":
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é",
                         reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, mailing_to_all)
    elif call.data == "ru_lang":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
        bot.register_next_step_handler(call.message, get_name)
    elif call.data == "close":
        bot.delete_message(user_id, call.message.message_id)
    elif call.data == "user_cart":
        bot.delete_message(user_id, call.message.message_id)
        user_cart = pr.get_user_cart(user_id)
        full_text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ \n\n"
        total_amount = 0
        for i in user_cart:
            full_text += f"{i[0]} x{i[1]} = {i[2]:,.0f}\n"
            total_amount += i[2]
        full_text += f"\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ {total_amount:,.0f} —Å—É–º"
        cart = pr.get_user_cart_id_name(user_id)
        status = 1
        if cart == []:
            status = 0
        pr_name = []
        for i in cart:
            pr_name.append(i[0])
        bot.send_message(user_id, full_text, reply_markup=bt.get_cart_kb_ru(cart, status))
    elif call.data == "plus":
        current_ammount = carts[user_id]["pr_count"]
        carts[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id,
                                      reply_markup=bt.exact_product_ru(current_ammount, "plus"))
    elif call.data == "minus":
        current_ammount = carts[user_id]["pr_count"]
        if current_ammount > 1:
            carts[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id,
                                      reply_markup=bt.exact_product_ru(current_ammount, "minus"))
        else:
            pass
    elif call.data == "none":
        pass
    elif call.data == "to_cart":
        pr.add_to_cart(user_id=user_id, product_name=carts.get(user_id).get("pr_name"),
                       product_count=carts.get(user_id).get("pr_count"),
                       product_price=carts.get(user_id).get("pr_price"))
        carts.pop(user_id)
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
        cats = pr.get_cats()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.categories_ru(cats))
    elif call.data == "clear_cart":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        pr.delete_user_cart(user_id)
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        cats = pr.get_cats()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.categories_ru(cats))
    elif call.data == "main_menu":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())
    elif call.data == "order":
        bot.delete_message(user_id, call.message.id)
        bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–±–∏—Ä—å –∏–ª–∏ –≤–∞—Å–∞–±–∏?", reply_markup=bt.accept_kb())
    elif call.data == "no":
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        try:
            carts.pop(user_id)
        except:
            pass
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é", reply_markup=bt.location_kb_ru())
        bot.register_next_step_handler(call.message, get_location)
    elif call.data == "yes":
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        cats = pr.get_cats()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.categories_ru(cats))
    elif call.data == "get_base":
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", reply_markup=bt.base_kb())
    elif call.data == "cats_excel":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        try:
            file = convert_to_excel("category")
            excel_file = open(f"{file}.xlsx", "rb")
            bot.send_document(user_id, excel_file)
            excel_file.close()
            os.remove(f"{file}.xlsx")
        except:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    elif call.data == "prods_excel":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        try:
            file = convert_to_excel("product")
            excel_file = open(f"{file}.xlsx", "rb")
            bot.send_document(user_id, excel_file)
            excel_file.close()
            os.remove(f"{file}.xlsx")
        except:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    elif call.data == "users_excel":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        try:
            file = convert_to_excel("user")
            excel_file = open(f"{file}.xlsx", "rb")
            bot.send_document(user_id, excel_file)
            excel_file.close()
            os.remove(f"{file}.xlsx")
        except:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    elif call.data == "admins_excel":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        try:
            file = convert_to_excel("admin")
            excel_file = open(f"{file}.xlsx", "rb")
            bot.send_document(user_id, excel_file)
            excel_file.close()
            os.remove(f"{file}.xlsx")
        except:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    elif call.data == "admin_product":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏", reply_markup=bt.admin_product_menu_kb())
    elif call.data == "add_product":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, product_ru_name)
    elif call.data == "delete_product":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, delete_product)
    elif call.data == "admins":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.admins_kb())
    elif call.data == "delete_admin":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–≥ –∞–π–¥–∏ —É–¥–∞–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, delete_admin)
    elif call.data == "add_admin":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–≥ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, add_admin)
    elif call.data == "change_product":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.change_product_kb())
    elif call.data == "change_name":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=bt.change_product_name_kb())
    elif call.data == "change_desc":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ö–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=bt.change_product_desc_kb())
    elif call.data == "change_cat":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_cat)
    elif call.data == "change_photo":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_photo)
    elif call.data == "change_price":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_price)
    elif call.data == "change_ru_name":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_ru_name)
    elif call.data == "change_uz_name":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_uz_name)
    elif call.data == "change_ru_desc":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_ru_desc)
    elif call.data == "change_uz_desc":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, change_prod_uz_desc)
    elif call.data == "send_prove":
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, send_screenshot)
    elif call.data == "accept_order":
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, admins_answer_ru, "accept")
    elif call.data == "cancel_order":
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–∞–∑–∞ –∑–∞–∫–∞–∑–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, admins_answer_ru, "cancel")
    elif call.data == "send_message":
        bot.send_message(user_id, "–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(call.message, admins_get_text_ru)
    elif call.data == "cash":
        bot.send_message(chat_id=admins_group, text=f"–ü–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏ –æ—Ç —é–∑–µ—Ä–∞ <code> {user_id} </code>",
                       parse_mode="HTML", reply_markup=bt.admin_accept_kb_ru())
        bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç")
    elif call.data == "to_mm":
        checker = us.check_user_db(user_id=user_id)
        if checker == True:
            language = us.check_language_db(user_id)
            if language == "ru":
                cats = pr.get_cats()
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.categories_ru(cats))

            elif language == "uz":
                cats = pr.get_cats_uz()
                bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.categories_uz(cats))
        elif checker == False:
            bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ \n\n"
                                      "–•—É—à –∫–µ–ª–∏–±—Å–∏–∑! –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.choose_language_kb())




@bot.callback_query_handler(lambda call: call.data in ["back_uz", "user_cart_uz", "plus_uz", "minus_uz",
                                                       "none", "to_cart_uz", "clear_cart_uz", "main_menu_uz",
                                                       "order_uz", "close_uz", "yes_uz", "no_uz", "uz_lang",
                                                       "send_prove_uz", "cancel_order_uz", "accept_order_uz",
                                                       "send_message_uz", "cash_uz"])
def for_call_uz(call):
    user_id = call.message.chat.id
    if call.data == "back_uz":
        bot.delete_message(user_id, call.message.message_id)
        cats = pr.get_cats_uz()
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.categories_uz(cats))
    elif call.data == "uz_lang":
        bot.send_message(user_id, "–ò—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥")
        bot.register_next_step_handler(call.message, get_name_uz)
    elif call.data == "close_uz":
        bot.delete_message(user_id, call.message.message_id)
    elif call.data == "user_cart_uz":
        bot.delete_message(user_id, call.message.message_id)
        user_cart = pr.get_user_cart(user_id)
        status = 1
        if user_cart == []:
            status = 0
        full_text = f"–°–∞–≤–∞—Ç–∏–Ω–≥–∏–∑ \n\n"
        total_amount = 0
        for i in user_cart:
            full_text += f"{i[0]} x{i[1]} = {i[2]}\n"
            total_amount += i[2]
        full_text += f"\n\n–£–º—É–º–∏–π —Å—É–º–º–∞: {total_amount:,.0f} —Å—û–º"
        cart = pr.get_user_cart_id_name(user_id)
        pr_name = []
        for i in cart:
            pr_name.append(i[0])
        bot.send_message(user_id, full_text, reply_markup=bt.get_cart_kb_uz(cart, status))
    elif call.data == "plus_uz":
        current_ammount = carts[user_id]["pr_count"]
        carts[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id,
                                      reply_markup=bt.exact_product_uz(current_ammount, "plus"))
    elif call.data == "minus_uz":
        current_ammount = carts[user_id]["pr_count"]
        if current_ammount > 1:
            carts[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id,
                                      reply_markup=bt.exact_product_uz(current_ammount, "minus"))
        else:
            pass
    elif call.data == "none":
        pass
    elif call.data == "cash_uz":
        bot.send_message(chat_id=admins_group, text=f"–ü–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏ –æ—Ç —é–∑–µ—Ä–∞ <code> {user_id} </code>",
                       parse_mode="HTML", reply_markup=bt.admin_accept_kb_uz())
        bot.send_message(user_id, "–¢–∞—Å–¥–∏“õ–ª–æ–≤ —é–±–æ—Ä–∏–ª–¥–∏. –ñ–∞–≤–æ–± –∫—É—Ç–∏—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑")
    elif call.data == "to_cart_uz":
        pr.add_to_cart(user_id=user_id, product_name=carts.get(user_id).get("pr_name"),
                       product_count=carts.get(user_id).get("pr_count"),
                       product_price=carts.get(user_id).get("pr_price"))
        carts.pop(user_id)
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ú–∞“≥—Å—É–ª–æ—Ç –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Å–∞–≤–∞—Ç–≥–∞ “õ—û—à–∏–ª–¥–∏")
        cats = pr.get_cats_uz()
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.categories_uz(cats))
    elif call.data == "clear_cart_uz":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        pr.delete_user_cart(user_id)
        bot.send_message(user_id, "–°–∞–≤–∞—Ç–∏–Ω–≥–∏–∑ –±—û—à–∞—Ç–∏–ª–¥–∏")
        cats = pr.get_cats_uz()
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.categories_uz(cats))
    elif call.data == "main_menu_uz":
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())
    elif call.data == "order_uz":
        bot.delete_message(user_id, call.message.id)
        bot.send_message(user_id, "–ë–æ—à“õ–∞ –Ω–∏–º–∞–Ω–∏ –±—É—é—Ä—Ç–º–∞“õ—á–∏–º–∏—Å–∏–∑?", reply_markup=bt.accept_kb_uz())
    elif call.data == "no_uz":
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        try:
            carts.pop(user_id)
        except:
            pass
        bot.send_message(user_id, "–õ–æ–∫–∞—Ü–∏—è–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥", reply_markup=bt.location_kb_uz())
        bot.register_next_step_handler(call.message, get_location_uz)
    elif call.data == "yes_uz":
        bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        cats = pr.get_cats_uz()
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.categories_uz(cats))
    elif call.data == "send_prove_uz":
        bot.send_message(user_id, "–¢—û–ª–æ–≤ —Ä–∞—Å–º–∏–Ω–∏/—Å–∫—Ä–∏–Ω—à–æ—Ç–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥", reply_markup=bt.cancel_kb_uz())
        bot.register_next_step_handler(call.message, send_screenshot_uz)
    elif call.data == "accept_order_uz":
        bot.send_message(user_id, "“ö—û—à–∏–º—á–∞ –∏–º–±–∏—Ä —ë–∫–∏ –≤–æ—Å–∞–±–∏ –∏—Å—Ç–∞–π—Å–∏–∑–º–∏?", reply_markup=bt.cancel_kb_uz())
        bot.register_next_step_handler(call.message, admins_answer_uz, "accept")
    elif call.data == "cancel_order_uz":
        bot.send_message(user_id, "–ë—É—é—Ä—Ç–º–∞–Ω–∏ —Ä–∞–¥ —ç—Ç–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥", reply_markup=bt.cancel_kb_uz())
        bot.register_next_step_handler(call.message, admins_answer_uz, "cancel")
    elif call.data == "send_message_uz":
        bot.send_message(user_id, "–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥", reply_markup=bt.cancel_kb_uz())
        bot.register_next_step_handler(call.message, admins_get_text_uz)



@bot.callback_query_handler(lambda call: call.data in pr.get_all_cats_name() or call.data in pr.get_all_cats_name_uz())
def call_cats(call):
    user_id = call.message.chat.id
    language = us.check_language_db(user_id)
    bot.delete_message(user_id, call.message.message_id)
    if language == "ru":
        get_products = pr.get_products_by_cat(call.data)
        bot.send_message(user_id, f'{call.data}\n'
                                  f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', reply_markup=bt.products_ru(get_products))
    elif language == "uz":
        get_products = pr.get_products_by_cat_uz(call.data)
        bot.send_message(user_id, f'{call.data}\n'
                                  f'–ü—Ä–æ–¥—É–∫—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥', reply_markup=bt.products_uz(get_products))

@bot.callback_query_handler(lambda call: call.data in pr.get_all_products_name())
def call_products(call):
    user_id = call.message.chat.id
    try:
        product = pr.get_product(call.data)
        bot.delete_message(user_id, call.message.id)
        carts[user_id] = {}
        carts[user_id] = {"pr_name": product[0], "pr_count": 1, "pr_price": product[1]}
        bot.send_photo(user_id, photo=product[3], caption=f"{product[0]}\n"
                                                          f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {product[2]}\n"
                                                          f"<b>–¶–µ–Ω–∞</b>: {product[1]:,.0f} —Å—É–º\n"
                                                          f"–í—ã–±—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", reply_markup=bt.exact_product_ru(),
                       parse_mode="HTML")
    except:
        pass
@bot.callback_query_handler(lambda call: call.data in pr.get_all_products_name_uz())
def call_products_uz(call):
    user_id = call.message.chat.id
    product = pr.get_product_uz(call.data)
    bot.delete_message(user_id, call.message.id)
    carts[user_id] = {}
    carts[user_id] = {"pr_name": product[0], "pr_count": 1, "pr_price": product[1]}

    bot.send_photo(user_id, photo=product[3], caption=f"{product[0]}\n"
                                                      f"<b>–¢–∞–≤—Å–∏—Ñ</b>: {product[2]}\n"
                                                      f"<b>–ù–∞—Ä—Ö</b>: {product[1]:,.0f} —Å—û–º\n"
                                                      f"–ú–∏–∫–¥–æ—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥: ", reply_markup=bt.exact_product_uz(),
                   parse_mode="HTML")


try:
    @bot.callback_query_handler(lambda call: call.data in pr.user_cart_ids(call.message.chat.id))
    def call_for_delete_cart(call):
        user_id = call.message.chat.id
        language = us.check_language_db(user_id)
        if language == "ru":
            pr.delete_exact_product_from_cart(call.data)
            user_cart = pr.get_user_cart(user_id)
            full_text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ \n\n"
            total_amount = 0
            for i in user_cart:
                full_text += f"{i[0]} x{i[1]} = {i[2]:,.0f}\n"
                total_amount += i[2]
            full_text += f"\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ {total_amount:,.0f} —Å—É–º"
            cart = pr.get_user_cart_id_name(user_id)
            status = 1
            if cart == []:
                status = 0
            bot.edit_message_text(chat_id=user_id, message_id=call.message.id, text=full_text,
                                  reply_markup=bt.get_cart_kb_ru(cart, status))
        elif language == "uz":
            pr.delete_exact_product_from_cart(call.data)
            user_cart = pr.get_user_cart(user_id)
            status = 1
            if user_cart == []:
                status = 0
            full_text = f"–°–∞–≤–∞—Ç–∏–Ω–≥–∏–∑ \n\n"
            total_amount = 0
            for i in user_cart:
                full_text += f"{i[0]} x{i[1]} = {i[2]:,.0f}\n"
                total_amount += i[2]
            full_text += f"\n\n–£–º—É–º–∏–π —Å—É–º–º–∞ {total_amount:,.0f} —Å—û–º"
            cart = pr.get_user_cart_id_name(user_id)
            bot.edit_message_text(chat_id=user_id, message_id=call.message.id, text=full_text,
                                  reply_markup=bt.get_cart_kb_uz(cart, status))
except:
    pass
@bot.message_handler(content_types=["text"])
def mm(message):
    user_id = message.from_user.id
    language = us.check_language_db(user_id)
    text = message.text
    if language == "ru":
        if text == "üçΩ–ú–µ–Ω—é":
            cats = pr.get_cats()
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.categories_ru(cats))
        elif text == "‚úçÔ∏è–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
            bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤", reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, feedback)
        elif text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
            status = 1
            user_cart = pr.get_user_cart(user_id)
            full_text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ \n\n"
            if user_cart == []:
                status = 0
            total_amount = 0
            for i in user_cart:
                full_text += f"{i[0]} x{i[1]} = {i[2]:,.0f}\n"
                total_amount += i[2]
            full_text += f"\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ {total_amount:,.0f} —Å—É–º"
            cart = pr.get_user_cart_id_name(user_id)
            bot.send_message(user_id, full_text, reply_markup=bt.get_cart_kb_ru(cart, status))
        elif text == "üá∫üáøO'zbek tili":
            us.change_language(user_id=user_id, new_language="uz")
            bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())


    elif language == "uz":
        if text == "üçΩ–ú–µ–Ω—é":
            cats = pr.get_cats_uz()
            bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.categories_uz(cats))
        elif text == "‚úçÔ∏è–§–∏–∫—Ä “õ–æ–ª–¥–∏—Ä–∏—à":
            bot.send_message(user_id, "–§–∏–∫—Ä–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥", reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, feedback_uz)
        elif text == "üõí–°–∞–≤–∞—Ç":
            status = 1
            user_cart = pr.get_user_cart(user_id)
            if user_cart == []:
                status = 0
            full_text = f"–°–∞–≤–∞—Ç–∏–Ω–≥–∏–∑ \n\n"
            total_amount = 0
            for i in user_cart:
                full_text += f"{i[0]} x{i[1]} = {i[2]:,.0f}\n"
                total_amount += i[2]
            full_text += f"\n\n–£–º—É–º–∏–π —Å—É–º–º–∞ {total_amount:,.0f} —Å—û–º"
            cart = pr.get_user_cart_id_name(user_id)
            bot.send_message(user_id, full_text, reply_markup=bt.get_cart_kb_uz(cart, status))
        elif text == "üá∑üá∫–†—É—Å—Å–∫–∏–π —è–∑—ã–∫":
            us.change_language(user_id=user_id, new_language="ru")
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())
    elif text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(user_id, "–î–µ–πc—Çd–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
        bot.clear_step_handler(message)


def get_location(message):
    user_id = message.from_user.id
    if message.location:
        longitude = message.location.longitude
        latitude = message.location.latitude
        location = geolocators(latitude, longitude)
        user_cart = pr.get_user_cart(user_id)
        user_info = us.get_user_info(user_id)
        full_text = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç —é–∑–µ—Ä–∞ <code>{user_id}</code>: \n"
                     f"<b>–ù–æ–º–µ—Ä</b>: +{user_info[0]}\n"
                     f"<b>–Ø–∑—ã–∫</b>: {user_info[1]}\n"
                     f"<b>–ê–¥—Ä–µ—Å</b>: <code>{location}</code>\n\n")
        total_amount = 0
        for i in user_cart:
            full_text += f"{i[0]} x{i[1]} = {i[2]}\n"
            total_amount += i[2]
        full_text += f"\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ {total_amount}"
        bot.send_message(admins_group, full_text, parse_mode="HTML", reply_markup=bt.admin_accept_kb_ru())
        bot.send_message(user_id, f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ {total_amount:,.0f} —Å—É–º "
                                  f"–Ω–∞ –∫–∞—Ä—Ç—É:\n"
                                  f"<b>UZCARD</b>: <code>8600 4929 9818 5108</code>\n"
                                  f"<b>VISA</b>: <code>4278 3200 2178 0209</code>\n"
                                  f"–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º",
                         reply_markup=bt.send_prove_kb(), parse_mode="HTML")
        pr.delete_user_cart(user_id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())
    elif message.text == "‚ùå–û—Ç–º–µ–Ω–∞":
        bot.send_message(user_id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", reply_markup=ReplyKeyboardRemove())
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        bot.register_next_step_handler(message, get_location)
def get_location_uz(message):
    user_id = message.from_user.id
    if message.location:
        longitude = message.location.longitude
        latitude = message.location.latitude
        location = geolocators(latitude, longitude)
        user_cart = pr.get_user_cart(user_id)
        user_info = us.get_user_info(user_id)
        full_text = (f"<b>–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏</b> <code>{user_id}</code>–¥–∞–Ω —è–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞:\n"
                     f"<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +{user_info[0]}\n"
                     f"<b>Til</b>: {user_info[1]}\n"
                     f"<b>–ú–∞–Ω–∑–∏–ª</b>: <code>{location}</code>\n\n")
        total_amount = 0
        for i in user_cart:
            full_text += f"{i[0]} x{i[1]} = {i[2]}\n"
            total_amount += i[2]
        full_text += f"\n\n–£–º—É–º–∏–π —Å—É–º–º–∞ {total_amount:,.0f} —Å—û–º"
        bot.send_message(admins_group, full_text, parse_mode="HTML", reply_markup=bt.admin_accept_kb_ru())
        bot.send_message(user_id, f"–°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. {total_amount:,.0f} —Å—û–º "
                                  f"–∫–∞—Ä—Ç–∞–≥–∞ —é–±–æ—Ä–∏–Ω–≥:\n"
                                  f"<b>UZCARD</b>: <code>8600 4929 9818 5108</code>\n"
                                  f"<b>VISA</b>: <code>4278 3200 2178 0209</code>\n"
                                  f"–≤–∞ —Ç–∞—Å–¥–∏“õ–ª–æ–≤ —É—á—É–Ω —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥",
                         reply_markup=bt.send_prove_kb_uz(), parse_mode="HTML")
        pr.delete_user_cart(user_id)
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())
    elif message.text == "‚ùå–ë–µ–∫–æ—Ä “õ–∏–ª–∏—à":
        bot.send_message(user_id, "–°–∏–∑ –±—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–¥–∏–Ω–≥–∏–∑", reply_markup=ReplyKeyboardRemove())
        bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())
    else:
        bot.send_message(user_id, "–õ–æ–∫–∞—Ü–∏—è–Ω–∏ —é–±–æ—Ä–∏–Ω–≥")
        bot.register_next_step_handler(message, get_location_uz)

def feedback(message):
    user_id = message.from_user.id
    feedback_text = message.text
    full_text = (f"<b>–ê–π–¥–∏ —é–∑–µ—Ä–∞</b>:<code>{user_id}</code>\n"
                 f"<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞</b>: {feedback_text}")
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n"
                              "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_ru())

    bot.send_message(admins_group, full_text, parse_mode="HTML")
def feedback_uz(message):
    user_id = message.from_user.id
    feedback_text = message.text
    full_text = (f"<b>–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID</b>:<code>{user_id}</code>\n"
                 f"<b>–§–∏–∫—Ä –º–∞—Ç–Ω–∏</b>: {feedback_text}")
    bot.send_message(user_id, "–§–∏–∫—Ä–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞—Ö–º–∞—Ç!\n"
                              "“≤–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=bt.main_menu_uz())

    bot.send_message(admins_group, full_text, parse_mode="HTML")
def product_ru_name(message):
    user_id = message.from_user.id
    product_name = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, product_uz_name, product_name)
def product_uz_name(message, product_name):
    user_id = message.from_user.id
    product_name_uz = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, product_ru_desc, product_name, product_name_uz)
def product_ru_desc(message, product_name, product_name_uz):
    user_id = message.from_user.id
    product_desc_ru = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, product_uz_desc, product_name, product_name_uz, product_desc_ru)
def product_uz_desc(message, product_name, product_name_uz, product_desc_ru):
    user_id = message.from_user.id
    product_desc_uz = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, product_prices, product_name, product_name_uz,
                                   product_desc_ru, product_desc_uz)
def product_prices(message, product_name, product_name_uz, product_desc_ru, product_desc_uz):
    user_id = message.from_user.id
    product_price = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —ç–º–æ–¥–∑–∏", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, products_cat, product_name, product_name_uz,
                                   product_desc_ru, product_desc_uz, product_price)
def products_cat(message, product_name, product_name_uz, product_desc_ru, product_desc_uz, product_price):
    user_id = message.from_user.id
    cat = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())

    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞(–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞)", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, product_photo, product_name, product_name_uz,
                                   product_desc_ru, product_desc_uz, product_price, cat)
def product_photo(message, product_name, product_name_uz, product_desc_ru, product_desc_uz, product_price, cat):
    user_id = message.from_user.id
    if message.photo:
            photo = message.photo[-1].file_id
            text = pr.register_product(product_name=product_name, product_name_uz=product_name_uz, product_price=product_price,
                                product_description=product_desc_ru, product_description_uz=product_desc_uz,
                                product_photo=photo, product_cat=cat)
            bot.send_message(user_id, text,
                             reply_markup=ReplyKeyboardRemove())
    elif message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        bot.register_next_step_handler(message, product_photo, product_name, product_name_uz,
                                       product_desc_ru, product_desc_uz, product_price, cat)

def delete_product(message):
    user_id = message.from_user.id
    text = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    info = pr.delete_product(text)
    bot.send_message(user_id, info, reply_markup=ReplyKeyboardRemove())
def add_admin(message):
    user_id = message.from_user.id
    admin_id = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞", reply_markup=bt.cancel_kb())
    bot.register_next_step_handler(message, register_admin, admin_id)
def register_admin(message, admin_id):
    user_id = message.from_user.id
    name = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    try:
        us.register_admin(int(admin_id), name)
        bot.send_message(user_id, "–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=ReplyKeyboardRemove())
    except:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", reply_markup=ReplyKeyboardRemove())
def delete_admin(message):
    user_id = message.from_user.id
    admin_id = message.text
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    try:
        us.delete_admin_db(admin_id)
        bot.send_message(user_id, "–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω", reply_markup=ReplyKeyboardRemove())
    except:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", reply_markup=ReplyKeyboardRemove())
def change_prod_cat(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_cat"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_info, product_id, column)
def change_prod_price(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_price"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_info, product_id, column)
def change_prod_ru_name(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_name"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_info, product_id, column)
def change_prod_uz_name(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_name_uz"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —É–∑–±–µ–∫—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_info, product_id, column)
def change_prod_ru_desc(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_description"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä—É—Å—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_info, product_id, column)
def change_prod_uz_desc(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_description_uz"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —É–∑–±–µ–∫—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_info, product_id, column)
def change_prod_photo(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.text.isdigit():
        product_id = int(message.text)
        column = "product_photo"
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞(–Ω–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞)", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_photo_info, product_id, column)
def change_prod_info(message, product_id, column):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    else:
        try:
            new_info = message.text
            pr.change_product_info(product_id=product_id, column=column, new_info=new_info)
            bot.send_message(user_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
        except:
            bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=ReplyKeyboardRemove())
def change_prod_photo_info(message, product_id, column):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.photo:
            try:
                new_info = message.photo[-1].file_id
                pr.change_product_info(product_id=product_id, column=column, new_info=new_info)
                bot.send_message(user_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
            except:
                bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, change_prod_photo_info, product_id, column)
def send_screenshot(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
    elif message.photo:
            try:
                photo = message.photo[-1].file_id
                bot.send_photo(chat_id=admins_group, photo=photo, caption=f"–ü–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç —é–∑–µ—Ä–∞ <code> {user_id} </code>",
                               parse_mode="HTML", reply_markup=bt.admin_accept_kb_ru())
                bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç")
            except:
                bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, send_screenshot)
def send_screenshot_uz(message):
    user_id = message.from_user.id
    if message.text == "‚ùå–ë–µ–∫–æ—Ä “õ–∏–ª–∏—à":
        return bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏", reply_markup=ReplyKeyboardRemove())
    elif message.photo:
            try:
                photo = message.photo[-1].file_id
                bot.send_photo(chat_id=admins_group, photo=photo, caption=f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–¥–∞–Ω —Ç–∞—Å–¥–∏“õ–ª–æ–≤ —Ä–∞—Å–º–∏ <code> {user_id} </code>",
                               parse_mode="HTML", reply_markup=bt.admin_accept_kb_uz())
                bot.send_message(user_id, "–¢–∞—Å–¥–∏“õ–ª–æ–≤ —é–±–æ—Ä–∏–ª–¥–∏. –ñ–∞–≤–æ–± –∫—É—Ç–∏—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑")
            except:
                bot.send_message(user_id, "–¢—û–ª–æ–≤–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à –º—É–º–∫–∏–Ω –±—û–ª–º–∞–¥–∏, —è–Ω–≥–∏–¥–∞–Ω —É—Ä—É–Ω–≥", reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, "–§–æ—Ç–æ–Ω–∏ —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ —é–±–æ—Ä–∏–Ω–≥", reply_markup=bt.cancel_kb())
        bot.register_next_step_handler(message, send_screenshot)
def admins_get_text_ru(message):
    user_id = message.from_user.id
    type = "message"
    try:
        if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
            return bot.send_message(user_id, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
        else:
            to_id = int(message.text)
            bot.send_message(admins_group, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=bt.cancel_kb())
            bot.register_next_step_handler(message, admins_answer_ru, type, to_id)
    except:
        bot.send_message(admins_group, "–û—à–∏–±–∫–∞", reply_markup=ReplyKeyboardRemove())
def admins_get_text_uz(message):
    user_id = message.from_user.id
    type = "message"
    try:
        if message.text == "‚ùå–ë–µ–∫–æ—Ä “õ–∏–ª–∏—à":
            return bot.send_message(user_id, "“≤–∞—Ä–∞–∫–∞—Ç –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏", reply_markup=ReplyKeyboardRemove())
        else:
            to_id = int(message.text)
            bot.send_message(admins_group, "–•–∞–±–∞—Ä –º–∞—Ç–Ω–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥", reply_markup=bt.cancel_kb_uz())
            bot.register_next_step_handler(message, admins_answer_uz, type, to_id)
    except:
        bot.send_message(admins_group, "–•–∞—Ç–æ–ª–∏–∫", reply_markup=ReplyKeyboardRemove())


def admins_answer_ru(message, type, m_id=None):
    user_id = message.from_user.id
    to_id = message.text
    try:
        if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
            return bot.send_message(admins_group, "–î–µ–πc—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
        elif type == "accept":
            bot.send_message(int(to_id), "–ú—ã –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞")
            bot.send_message(admins_group, f"–ó–∞–∫–∞–∑ —é–∑–µ—Ä–∞ <code>{to_id}</code> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", parse_mode="HTML",
                             reply_markup=ReplyKeyboardRemove())
        elif type == "cancel":
            bot.send_message(int(to_id), "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            bot.send_message(admins_group, f"–ó–∞–∫–∞–∑ —é–∑–µ—Ä–∞ <code>{to_id}</code> –æ—Ç–∫–æ–ª–µ–Ω–µ–Ω ‚ùå", parse_mode="HTML",
                             reply_markup=ReplyKeyboardRemove())
        elif m_id:
            if type == "message":
                bot.send_message(m_id, to_id)
                bot.send_message(admins_group, f"–Æ–∑–µ—Ä <code>{m_id}</code> –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ‚òëÔ∏è", parse_mode="HTML",
                                 reply_markup=ReplyKeyboardRemove())
    except:
        bot.send_message(admins_group, "–û—à–∏–±–∫–∞", reply_markup=ReplyKeyboardRemove())
def admins_answer_uz(message, type, m_id=None):
    user_id = message.from_user.id
    to_id = message.text
    try:
        if message.text == "‚ùå–ë–µ–∫–æ—Ä “õ–∏–ª–∏—à":
            return bot.send_message(admins_group, "“≤–∞—Ä–∞–∫–∞—Ç –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏", reply_markup=ReplyKeyboardRemove())
        elif type == "accept":
            bot.send_message(int(to_id), "–°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞–± –æ–ª–∏—à–Ω–∏ –±–æ—à–ª–∞–¥–∏–∫")
            bot.send_message(admins_group, f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞—Å–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏ ‚úÖ", parse_mode="HTML")
        elif type == "cancel":
            bot.send_message(int(to_id), "–°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏")
            bot.send_message(admins_group, f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞—Å–∏ —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏ ‚ùå", parse_mode="HTML",
                             reply_markup=ReplyKeyboardRemove())
        elif m_id and type == 'message':
            bot.send_message(m_id, to_id)
            bot.send_message(admins_group, f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ <code>{m_id}</code> —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏ ‚òëÔ∏è",
                             parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    except:
        bot.send_message(admins_group, "–û—à–∏–±–∫–∞", reply_markup=ReplyKeyboardRemove())
def send_message_to_user(target_id, text, photo):
    target = target_id
    if photo == None:
        try:
            time.sleep(0.1)
            bot.send_message(target, text, reply_markup=bt.for_mailing())
        except:
            pass
    else:
        try:
            time.sleep(0.1)
            bot.send_photo(target_id, photo=photo, caption=text, reply_markup=bt.for_mailing())
        except:
            pass


def mailing_to_all(message):
    user_id = message.from_user.id
    targets_id = us.get_all_users_id()
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
    elif message.photo:
        photo = message.photo[-1].file_id
        text = message.caption
        for target_id in targets_id:
            thread = threading.Thread(target=send_message_to_user, args=(target_id, text, photo))
            thread.start()
    else:
        for target_id in targets_id:
            text = message.text
            photo = None

            thread = threading.Thread(target=send_message_to_user, args=(target_id, text, photo))
            thread.start()
    bot.send_message(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())



bot.infinity_polling()